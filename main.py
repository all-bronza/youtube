import os
import re
from pathlib import Path
from typing import Optional, Tuple

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Update, Message
from aiogram.enums import ParseMode
import yt_dlp
from yt_dlp.utils import DownloadError
from dotenv import load_dotenv

# -------- –ó–∞–≥—Ä—É–∑–∫–∞ .env --------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "my-secret-path")
BASE_DIR = Path("/tmp")  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ Render
MAX_SEND_BYTES = 48 * 1024 * 1024  # ~48 –ú–ë –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ä–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
YT_COOKIES = os.getenv("YT_COOKIES")  # –ø—É—Ç—å –∫ cookies.txt (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ffmpeg (–¥–ª—è MP3) --------
FFMPEG_PATH: Optional[str] = None
try:
    import imageio_ffmpeg
    FFMPEG_PATH = imageio_ffmpeg.get_ffmpeg_exe()
except Exception:
    FFMPEG_PATH = None

# -------- –ë–æ—Ç –∏ —Ä–æ—É—Ç–µ—Ä --------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

YOUTUBE_RX = re.compile(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/\S+")

HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Äî —è –≤–µ—Ä–Ω—É –∞—É–¥–∏–æ üéß\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    " /audio <url> ‚Äî –∞—É–¥–∏–æ (m4a)\n"
    " /mp3 <url> ‚Äî –∞—É–¥–∏–æ –≤ mp3 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω ffmpeg)\n"
    " /video <url> ‚Äî –≤–∏–¥–µ–æ (–ø—ã—Ç–∞—é—Å—å ‚â§720p –∏ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä)\n"
    "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É ‚Äî –ø—Ä–∏—à–ª—é –∞—É–¥–∏–æ (m4a)."
)

@router.message(Command("start", "help"))
async def start(m: Message):
    await m.answer(HELP_TEXT)

def _cookies_path() -> Optional[Path]:
    """–í–µ—Ä–Ω—ë—Ç Path –∫ cookies.txt, –µ—Å–ª–∏ YT_COOKIES –∑–∞–¥–∞–Ω –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not YT_COOKIES:
        return None
    p = Path(YT_COOKIES)
    return p if p.exists() else None

def _base_opts(outtmpl: str) -> dict:
    """–ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è yt_dlp, —Å —É—á—ë—Ç–æ–º cookies –∏ ffmpeg."""
    opts = {
        "outtmpl": outtmpl,
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        # –ò–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω—ã–π User-Agent
        "http_headers": {
            "User-Agent": (
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
            )
        },
    }
    if FFMPEG_PATH:
        opts["ffmpeg_location"] = FFMPEG_PATH
    cpath = _cookies_path()
    if cpath:
        opts["cookiefile"] = str(cpath)
        # üëá –õ–û–ì: —É–≤–∏–¥–∏—à—å –ø—É—Ç—å –≤ Render ‚Üí Logs
        print(f"Using cookies from {cpath}")
    else:
        print("YT_COOKIES not set or file not found ‚Äî working without cookies")
    return opts

def _extract_info(url: str, download: bool, opts: dict) -> dict:
    """–í—ã–∑–æ–≤ yt_dlp —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏."""
    with yt_dlp.YoutubeDL(opts) as ydl:
        return ydl.extract_info(url, download=download)

async def _send_file_or_link(m: Message, fpath: Path, info: dict, kind: str) -> None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ï—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–∏–º–∏—Ç ‚Äî –¥–∞—ë–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (stream URL).
    kind: 'audio' | 'video' | 'document'
    """
    if fpath and fpath.exists() and fpath.stat().st_size <= MAX_SEND_BYTES:
        if kind == "audio":
            await m.answer_audio(audio=fpath.open("rb"), caption=f"üéß {fpath.name}")
        elif kind == "video":
            await m.answer_video(video=fpath.open("rb"), caption=f"üé¨ {fpath.name}")
        else:
            await m.answer_document(document=fpath.open("rb"), caption=f"üìé {fpath.name}")
        return

    stream_url = info.get("url")
    title = info.get("title", "media")
    if stream_url:
        await m.answer(
            "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º.\n"
            "–í–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n"
            f"{title}\n{stream_url}\n\n"
            "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –ø—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑."
        )
    else:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É.")

async def download_audio_m4a(url: str, dest_dir: Path) -> Tuple[Path, dict]:
    """–°–∫–∞—á–∏–≤–∞–µ–º –ª—É—á—à—É—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ .m4a)."""
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    opts.update({
        "format": "bestaudio[ext=m4a]/bestaudio/best",
    })
    info = _extract_info(url, download=True, opts=opts)
    fpath = Path(yt_dlp.YoutubeDL(opts).prepare_filename(info))
    return fpath, info

async def download_audio_mp3(url: str, dest_dir: Path) -> Tuple[Path, dict]:
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ mp3 (–Ω—É–∂–µ–Ω ffmpeg)."""
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    opts.update({
        "format": "bestaudio/best",
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }],
    })
    info = _extract_info(url, download=True, opts=opts)
    base = Path(yt_dlp.YoutubeDL(opts).prepare_filename(info)).with_suffix(".mp3")
    final = next((p for p in dest_dir.glob("*.mp3") if info.get("title", "") in p.name), base)
    return final, info

async def download_video(url: str, dest_dir: Path) -> Tuple[Path, dict]:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–ø—ã—Ç–∫–æ–π —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä.
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º mp4 ‚â§720p –∏ <48–ú–ë, –¥–∞–ª–µ–µ ‚â§480p, –¥–∞–ª–µ–µ best —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º.
    """
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    opts.update({
        "format": "mp4[height<=720][filesize<48M]/mp4[height<=480]/best[filesize<48M]/best",
    })
    info = _extract_info(url, download=True, opts=opts)
    fpath = Path(yt_dlp.YoutubeDL(opts).prepare_filename(info))
    return fpath, info

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ -----------------

async def _handle_download_error(m: Message, e: Exception) -> None:
    text = str(e)

    # –°–ø–µ—Ü-—Å–ª—É—á–∞–π: YouTube —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if isinstance(e, DownloadError) and (
        "Sign in to confirm" in text
        or "This video is age-restricted" in text
        or "account" in text.lower()
    ):
        cookies_hint = ""
        if not _cookies_path():
            cookies_hint = (
                "\n\nüí° –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å cookies.txt (Env: YT_COOKIES) ‚Äî "
                "—Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤—Ö–æ–¥–∞."
            )
        await m.answer(
            "‚ö†Ô∏è YouTube –ø—Ä–æ—Å–∏—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. "
            "–í–∏–¥–µ–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            f"{cookies_hint}"
        )
        return

    if "This video is private" in text:
        await m.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ. –ï–≥–æ –Ω–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å –±–æ—Ç–æ–º.")
        return

    if "The uploader has not made this video available in your country" in text:
        await m.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.")
        return

    await m.answer(f"–û—à–∏–±–∫–∞: {e}")

# ----------------- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ -----------------

@router.message(F.text.regexp(YOUTUBE_RX))
async def on_plain_link(m: Message):
    url = m.text.strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_m4a(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await _handle_download_error(m, e)

@router.message(Command("audio"))
async def cmd_audio(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /audio <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_m4a(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await _handle_download_error(m, e)

@router.message(Command("mp3"))
async def cmd_mp3(m: Message):
    if not FFMPEG_PATH:
        return await m.answer("MP3 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ—Ç ffmpeg). –ü–æ–ø—Ä–æ–±—É–π /audio (m4a).")
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /mp3 <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–ì–æ—Ç–æ–≤–ª—é MP3‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_mp3(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await _handle_download_error(m, e)

@router.message(Command("video"))
async def cmd_video(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /video <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_video(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "video")
    except Exception as e:
        await _handle_download_error(m, e)

# ----------------- FastAPI (webhook) -----------------

app = FastAPI()

@app.post(f"/webhook/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid update")
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health():
    return {"status": "ok"}
