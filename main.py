import os
import re
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Update, Message
from aiogram.enums import ParseMode
import yt_dlp

# -------- –ö–æ–Ω—Ñ–∏–≥ --------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "my-secret-path")  # –ª—é–±–æ–π —Ç–≤–æ–π –ø—É—Ç—å
BASE_DIR = Path("/tmp")  # –Ω–∞ Render –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
MAX_SEND_BYTES = 48 * 1024 * 1024  # ~48 –ú–ë - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ffmpeg –∏–∑ imageio-ffmpeg, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å MP3
FFMPEG_PATH: Optional[str] = None
try:
    import imageio_ffmpeg
    FFMPEG_PATH = imageio_ffmpeg.get_ffmpeg_exe()
except Exception:
    FFMPEG_PATH = None

# -------- –ë–æ—Ç/—Ä–æ—É—Ç–µ—Ä --------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

YOUTUBE_RX = re.compile(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/\S+")

HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Äî —è –≤–µ—Ä–Ω—É –∞—É–¥–∏–æ üéß\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    " /audio <url> ‚Äî —Ç–æ–ª—å–∫–æ –∑–≤—É–∫ (m4a; /mp3 <url> ‚Äî –≤ mp3)\n"
    " /video <url> ‚Äî –≤–∏–¥–µ–æ (–ø—ã—Ç–∞—é—Å—å ‚â§720p –∏ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä)\n"
    "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª—ë—à—å —Å—Å—ã–ª–∫—É ‚Äî –ø—Ä–∏—à–ª—é –∞—É–¥–∏–æ (m4a)."
)

@router.message(Command("start", "help"))
async def start(m: Message):
    await m.answer(HELP_TEXT)

def _base_opts(outtmpl: str):
    opts = {
        "outtmpl": outtmpl,
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
    }
    if FFMPEG_PATH:
        opts["ffmpeg_location"] = FFMPEG_PATH
    return opts

def _extract_info(url: str, download: bool, opts: dict):
    with yt_dlp.YoutubeDL(opts) as ydl:
        return ydl.extract_info(url, download=download)

async def _send_file_or_link(m: Message, fpath: Path, info: dict, kind: str):
    """
    kind: 'audio' | 'video' | 'document'
    –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫ (–±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è).
    """
    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    est_size = None
    if "filesize_approx" in info:
        est_size = info.get("filesize_approx")
    elif "filesize" in info:
        est_size = info.get("filesize")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –∏ –æ–Ω –Ω–µ –æ–≥—Ä–æ–º–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    if fpath and fpath.exists() and fpath.stat().st_size <= MAX_SEND_BYTES:
        if kind == "audio":
            await m.answer_audio(audio=fpath.open("rb"), caption=f"üéß {fpath.name}")
        elif kind == "video":
            await m.answer_video(video=fpath.open("rb"), caption=f"üé¨ {fpath.name}")
        else:
            await m.answer_document(document=fpath.open("rb"), caption=f"üìé {fpath.name}")
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –¥–∞—Ç—å –ø—Ä—è–º–æ–π URL (Telegram —Å–∞–º –ø–æ–¥—Ç—è–Ω–µ—Ç)
    stream_url = info.get("url")
    title = info.get("title", "media")
    if stream_url:
        await m.answer(
            "–§–∞–π–ª –±–æ–ª—å—à–æ–π –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n"
            f"{title}\n{stream_url}\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π. –ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø—Ä–∏—à–ª–∏ /audio –∏–ª–∏ /video —Å–Ω–æ–≤–∞."
        )
    else:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É.")

async def download_audio_m4a(url: str, dest_dir: Path) -> tuple[Path, dict]:
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    # m4a –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    opts.update({
        "format": "bestaudio[ext=m4a]/bestaudio/best",
    })
    info = _extract_info(url, download=True, opts=opts)
    return Path(yt_dlp.YoutubeDL(opts).prepare_filename(info)), info

async def download_audio_mp3(url: str, dest_dir: Path) -> tuple[Path, dict]:
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    # MP3 —á–µ—Ä–µ–∑ ffmpeg (–Ω—É–∂–µ–Ω FFMPEG_PATH ‚Äî imageio-ffmpeg)
    post = [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }]
    opts.update({
        "format": "bestaudio/best",
        "postprocessors": post,
    })
    info = _extract_info(url, download=True, opts=opts)
    # –ø–æ—Å–ª–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3
    base = Path(yt_dlp.YoutubeDL(opts).prepare_filename(info)).with_suffix(".mp3")
    # –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –∏–º—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è ‚Äî –∏—â–µ–º .mp3 –≤ –ø–∞–ø–∫–µ
    final = next((p for p in dest_dir.glob("*.mp3") if info.get("title", "") in p.name), base)
    return final, info

async def download_video(url: str, dest_dir: Path) -> tuple[Path, dict]:
    outtmpl = str(dest_dir / "%(title).200B.%(ext)s")
    opts = _base_opts(outtmpl)
    # –ü—ã—Ç–∞–µ–º—Å—è –±—Ä–∞—Ç—å ‚â§720p –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä
    opts.update({
        "format": "mp4[height<=720][filesize<48M]/mp4[height<=480]/best[filesize<48M]/best",
    })
    info = _extract_info(url, download=True, opts=opts)
    return Path(yt_dlp.YoutubeDL(opts).prepare_filename(info)), info

@router.message(F.text.regexp(YOUTUBE_RX))
async def on_plain_link(m: Message):
    url = m.text.strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_m4a(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("audio"))
async def cmd_audio(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /audio <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_m4a(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("mp3"))
async def cmd_mp3(m: Message):
    if not FFMPEG_PATH:
        return await m.answer("MP3 —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ—Ç ffmpeg). –î–æ—Å—Ç—É–ø–Ω–æ m4a. "
                              "–£—Å—Ç–∞–Ω–æ–≤–∏ imageio-ffmpeg –≤ requirements, –∑–∞–¥–µ–ø–ª–æ–π ‚Äî –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.")
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /mp3 <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–ì–æ—Ç–æ–≤–ª—é MP3‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_audio_mp3(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "audio")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("video"))
async def cmd_video(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–∞–∫: /video <—Å—Å—ã–ª–∫–∞ YouTube>")
    url = parts[1].strip()
    await m.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ‚Ä¶ ‚è≥")
    try:
        fpath, info = await download_video(url, BASE_DIR)
        await _send_file_or_link(m, fpath, info, "video")
    except Exception as e:
        await m.answer(
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º. "
            "–ü–æ–ø—Ä–æ–±—É–π /audio –∏–ª–∏ /mp3.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        )

# -------- FastAPI (webhook) --------
app = FastAPI()

@app.post(f"/webhook/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid update")
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health():
    return {"status": "ok"}
